// ==========================================================================================
// Mixins
// ==========================================================================================

@function calculateRem($size) {
	$remSize: $size / 16px;
	@return $remSize * 1rem;
}

@mixin font-size($size) {
	font-size: $size;
	font-size: calculateRem($size);
}

@mixin opacity($opacity) {
	$opacity-ie: $opacity * 100;
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity-ie})";
	filter: alpha(opacity=$opacity-ie);
	-moz-opacity: $opacity;
	-khtml-opacity: $opacity;
  	opacity: $opacity;
}

@mixin grayscale($grayscale: true ) {
  	@if $grayscale == true {
    		-webkit-filter: grayscale(100%);
    		filter: gray;
    		filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
  	} @else if $grayscale == false {
    		filter: grayscale(0%);
    		-webkit-filter: grayscale(0%);
    		filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0\'/></filter></svg>#grayscale");
  	} @else {
    		@error "@include grayscale(boolean)";
  	}
}

@mixin doubly($margin) {
	& + & {
		margin-left: $margin;
		@content;
  	}
}

@mixin gpu() {
	transform: translate3d(0, 0, 0);
	backface-visibility: hidden;
	perspective: 1000;
}

@mixin prefix($attribute, $value) {
  -webkit-#{$attribute}: #{$value};
  -ms-#{$attribute}: #{$value};
  -moz-#{$attribute}: #{$value};
  -o-#{$attribute}: #{$value};
  #{$attribute}: #{$value};
}